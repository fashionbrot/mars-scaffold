package ${package}.controller;



import ${package}.dto.${className}DTO;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.req.PageReq;
import ${package}.req.${className}Req;
import ${package}.vo.PageVo;
import ${package}.vo.RespVo;
#if ($swaggerStatus==1)
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import com.github.xiaoymin.knife4j.annotations.ApiSort;
import springfox.documentation.annotations.ApiIgnore;
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;
import java.util.Arrays;
import java.util.Collection;


/**
 * ${commentsEntity}
 *
 * @author ${author}
 * @email ${email}
 * @date ${date}
 */

@Controller
@RequestMapping("${pathName}")
#if ($swaggerStatus==1)
@Api(tags="${commentsApi}")
@ApiSort(${apiSort})
#end
public class ${className}Controller {

    @Autowired
    private ${className}Service ${variableClassName}Service;


    #if ($swaggerStatus==1)
    @ApiOperation("数据列表—分页")
    @GetMapping("/page")
    #else
    /**
     * 数据列表—分页
     */
    @GetMapping("/page")
    #end
    @ResponseBody
    public PageVo page(${className}Req req){
        return  ${variableClassName}Service.pageList(req);
    }


    #if ($swaggerStatus==1)
    @ApiOperation("数据列表")
    @GetMapping("/queryList")
    #else
    /**
     * 数据列表
     */
    @GetMapping("/queryList")
    #end
    @ResponseBody
    public Collection<${className}Entity> queryList(@RequestParam Map<String, Object> params){
        return  ${variableClassName}Service.queryList(params);
    }


    #if ($swaggerStatus==1)
    @ApiOperation("根据id查询")
    @PostMapping("/selectById")
    #else
    /**
     * 根据id查询
     */
    @PostMapping("/selectById")
    #end
    @ResponseBody
    public RespVo selectById( Long id){
        ${className}Entity data = ${variableClassName}Service.selectById(id);
        return RespVo.success(data);
    }


    #if ($swaggerStatus==1)
    @ApiOperation("新增")
    @PostMapping("/insert")
    #else
    /**
     * 新增
     */
    @PostMapping("/insert")
    #end
    @ResponseBody
    public RespVo add(@RequestBody ${className}Entity entity){
        ${variableClassName}Service.insert(entity);
        return RespVo.success();
    }


    #if ($swaggerStatus==1)
    @ApiOperation("修改")
    @PostMapping("/updateById")
    #else
    /**
     * 修改
     */
    @PostMapping("/updateById")
    #end
    @ResponseBody
    public RespVo updateById(@RequestBody ${className}Entity entity){
        ${variableClassName}Service.updateById(entity);
        return RespVo.success();
    }
    #if ($swaggerStatus==1)
    @ApiOperation("根据id删除")
    @PostMapping("/deleteById")
    #else
    /**
     *  根据id删除
     */
    @PostMapping("/deleteById")
    #end
    @ResponseBody
    public RespVo deleteById(Long id){
        ${variableClassName}Service.deleteById(id);
        return RespVo.success();
    }


    #if ($swaggerStatus==1)
    @ApiOperation("批量删除")
    @PostMapping("/deleteByIds")
    #else
    /**
     * 批量删除
     */
    @PostMapping("/deleteByIds")
    #end
    @ResponseBody
    public RespVo delete(@RequestBody Long[] ids){
        ${variableClassName}Service.deleteBatchIds(Arrays.asList(ids));
        return RespVo.success();
    }


}