package ${package}.controller;



import ${package}.dto.${className}DTO;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.req.PageReq;
import ${package}.req.${className}Req;
import ${package}.vo.PageVo;
import ${package}.vo.RespVo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import com.github.xiaoymin.knife4j.annotations.ApiSort;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;
import org.springframework.stereotype.Controller;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;


/**
 * ${commentsEntity}
 *
 * @author ${author}
 * @email ${email}
 * @date ${date}
 */

@Controller
@RequestMapping("${pathName}")
@Api(tags="${commentsApi}")
@ApiSort(${apiSort})
public class ${className}Controller {

    @Autowired
    private ${className}Service ${variableClassName}Service;

    @GetMapping("/page")
    @ApiOperation("数据列表—分页")
    public PageVo page(${className}Req req){
        return  ${variableClassName}Service.pageList(req);
    }

    @GetMapping("/queryList")
    @ApiOperation("数据列表")
    public List<${className}DTO> queryList(Map<String, Object> params){
        return  ${variableClassName}Service.${variableClassName}List(params);
    }

    @GetMapping("/selectById")
    @ApiOperation("根据id查询")
    public RespVo selectById( Long id){
        ${className}Entity data = ${variableClassName}Service.selectById(id);
        return RespVo.success(data);
    }

    @RequestMapping("/insert")
    @ApiOperation("新增")
    public RespVo save(@RequestBody ${className}Entity entity){
        ${variableClassName}Service.insert(entity);
        return RespVo.success();
    }

    @RequestMapping("/updateById")
    @ApiOperation("修改")
    public RespVo updateById(@RequestBody ${className}Entity entity){
        ${variableClassName}Service.updateById(entity);
        return RespVo.success();
    }

    @RequestMapping("/deleteByIds")
    @ApiOperation("批量删除")
    public RespVo delete(@RequestBody Long[] ids){
        ${variableClassName}Service.deleteBatchIds(Arrays.asList(ids));
        return RespVo.success();
    }


}